// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.application.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DetectedDevice extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DetectedDevice getRootAsDetectedDevice(ByteBuffer _bb) { return getRootAsDetectedDevice(_bb, new DetectedDevice()); }
  public static DetectedDevice getRootAsDetectedDevice(ByteBuffer _bb, DetectedDevice obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DetectedDevice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.device.pairing.PairingInfo infos() { return infos(new solarxr_protocol.device.pairing.PairingInfo()); }
  public solarxr_protocol.device.pairing.PairingInfo infos(solarxr_protocol.device.pairing.PairingInfo obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public solarxr_protocol.datatypes.hardware_info.HardwareAddress macAddress() { return macAddress(new solarxr_protocol.datatypes.hardware_info.HardwareAddress()); }
  public solarxr_protocol.datatypes.hardware_info.HardwareAddress macAddress(solarxr_protocol.datatypes.hardware_info.HardwareAddress obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startDetectedDevice(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addInfos(FlatBufferBuilder builder, int infosOffset) { builder.addOffset(0, infosOffset, 0); }
  public static void addMacAddress(FlatBufferBuilder builder, int macAddressOffset) { builder.addStruct(1, macAddressOffset, 0); }
  public static int endDetectedDevice(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DetectedDevice get(int j) { return get(new DetectedDevice(), j); }
    public DetectedDevice get(DetectedDevice obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DetectedDeviceT unpack() {
    DetectedDeviceT _o = new DetectedDeviceT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DetectedDeviceT _o) {
    if (infos() != null) _o.setInfos(infos().unpack());
    else _o.setInfos(null);
    if (macAddress() != null) macAddress().unpackTo(_o.getMacAddress());
    else _o.setMacAddress(null);
  }
  public static int pack(FlatBufferBuilder builder, DetectedDeviceT _o) {
    if (_o == null) return 0;
    int _infos = _o.getInfos() == null ? 0 : solarxr_protocol.device.pairing.PairingInfo.pack(builder, _o.getInfos());
    startDetectedDevice(builder);
    addInfos(builder, _infos);
    addMacAddress(builder, solarxr_protocol.datatypes.hardware_info.HardwareAddress.pack(builder, _o.getMacAddress()));
    return endDetectedDevice(builder);
  }
}

