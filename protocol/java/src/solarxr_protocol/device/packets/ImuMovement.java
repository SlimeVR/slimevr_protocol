// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device.packets;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ImuMovement extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ImuMovement getRootAsImuMovement(ByteBuffer _bb) { return getRootAsImuMovement(_bb, new ImuMovement()); }
  public static ImuMovement getRootAsImuMovement(ByteBuffer _bb, ImuMovement obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImuMovement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public solarxr_protocol.datatypes.math.Quat rotation() { return rotation(new solarxr_protocol.datatypes.math.Quat()); }
  public solarxr_protocol.datatypes.math.Quat rotation(solarxr_protocol.datatypes.math.Quat obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public solarxr_protocol.datatypes.math.Vec3f acceleration() { return acceleration(new solarxr_protocol.datatypes.math.Vec3f()); }
  public solarxr_protocol.datatypes.math.Vec3f acceleration(solarxr_protocol.datatypes.math.Vec3f obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startImuMovement(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addByte(0, (byte) id, (byte) 0); }
  public static void addRotation(FlatBufferBuilder builder, int rotationOffset) { builder.addStruct(1, rotationOffset, 0); }
  public static void addAcceleration(FlatBufferBuilder builder, int accelerationOffset) { builder.addStruct(2, accelerationOffset, 0); }
  public static int endImuMovement(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImuMovement get(int j) { return get(new ImuMovement(), j); }
    public ImuMovement get(ImuMovement obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ImuMovementT unpack() {
    ImuMovementT _o = new ImuMovementT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ImuMovementT _o) {
    int _oId = id();
    _o.setId(_oId);
    if (rotation() != null) rotation().unpackTo(_o.getRotation());
    else _o.setRotation(null);
    if (acceleration() != null) acceleration().unpackTo(_o.getAcceleration());
    else _o.setAcceleration(null);
  }
  public static int pack(FlatBufferBuilder builder, ImuMovementT _o) {
    if (_o == null) return 0;
    startImuMovement(builder);
    addId(builder, _o.getId());
    addRotation(builder, solarxr_protocol.datatypes.math.Quat.pack(builder, _o.getRotation()));
    addAcceleration(builder, solarxr_protocol.datatypes.math.Vec3f.pack(builder, _o.getAcceleration()));
    return endImuMovement(builder);
  }
}

