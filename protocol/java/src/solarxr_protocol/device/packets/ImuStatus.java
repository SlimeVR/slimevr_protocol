// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device.packets;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ImuStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ImuStatus getRootAsImuStatus(ByteBuffer _bb) { return getRootAsImuStatus(_bb, new ImuStatus()); }
  public static ImuStatus getRootAsImuStatus(ByteBuffer _bb, ImuStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImuStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int imuType() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public solarxr_protocol.datatypes.HzF32 pollRate() { return pollRate(new solarxr_protocol.datatypes.HzF32()); }
  public solarxr_protocol.datatypes.HzF32 pollRate(solarxr_protocol.datatypes.HzF32 obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public solarxr_protocol.datatypes.Temperature temperature() { return temperature(new solarxr_protocol.datatypes.Temperature()); }
  public solarxr_protocol.datatypes.Temperature temperature(solarxr_protocol.datatypes.Temperature obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public boolean hasErrorStatus() { return 0 != __offset(12); }
  public int errorStatus() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public float magnetometerAccuracy() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static void startImuStatus(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addByte(0, (byte) id, (byte) 0); }
  public static void addImuType(FlatBufferBuilder builder, int imuType) { builder.addShort(1, (short) imuType, (short) 0); }
  public static void addPollRate(FlatBufferBuilder builder, int pollRateOffset) { builder.addStruct(2, pollRateOffset, 0); }
  public static void addTemperature(FlatBufferBuilder builder, int temperatureOffset) { builder.addStruct(3, temperatureOffset, 0); }
  public static void addErrorStatus(FlatBufferBuilder builder, int errorStatus) { builder.addByte(4, (byte) errorStatus, (byte) 0); }
  public static void addMagnetometerAccuracy(FlatBufferBuilder builder, float magnetometerAccuracy) { builder.addFloat(5, magnetometerAccuracy, 0.0f); }
  public static int endImuStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImuStatus get(int j) { return get(new ImuStatus(), j); }
    public ImuStatus get(ImuStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ImuStatusT unpack() {
    ImuStatusT _o = new ImuStatusT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ImuStatusT _o) {
    int _oId = id();
    _o.setId(_oId);
    int _oImuType = imuType();
    _o.setImuType(_oImuType);
    if (pollRate() != null) pollRate().unpackTo(_o.getPollRate());
    else _o.setPollRate(null);
    if (temperature() != null) temperature().unpackTo(_o.getTemperature());
    else _o.setTemperature(null);
    Integer _oErrorStatus = hasErrorStatus() ? errorStatus() : null;
    _o.setErrorStatus(_oErrorStatus);
    float _oMagnetometerAccuracy = magnetometerAccuracy();
    _o.setMagnetometerAccuracy(_oMagnetometerAccuracy);
  }
  public static int pack(FlatBufferBuilder builder, ImuStatusT _o) {
    if (_o == null) return 0;
    startImuStatus(builder);
    addId(builder, _o.getId());
    addImuType(builder, _o.getImuType());
    addPollRate(builder, solarxr_protocol.datatypes.HzF32.pack(builder, _o.getPollRate()));
    addTemperature(builder, solarxr_protocol.datatypes.Temperature.pack(builder, _o.getTemperature()));
    if (_o.getErrorStatus() != null) { addErrorStatus(builder, _o.getErrorStatus()); }
    addMagnetometerAccuracy(builder, _o.getMagnetometerAccuracy());
    return endImuStatus(builder);
  }
}

