// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device.pairing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Broadcast by the device on startup to tell servers what this device supports,
 * and if it's already paired (i.e. if the server should show the popup).
 */
@SuppressWarnings("unused")
public final class PairingInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PairingInfo getRootAsPairingInfo(ByteBuffer _bb) { return getRootAsPairingInfo(_bb, new PairingInfo()); }
  public static PairingInfo getRootAsPairingInfo(ByteBuffer _bb, PairingInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PairingInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * If this tracker isn't paired to any server, this field should be `0`.
   */
  public long pairedTo() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String displayName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer displayNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer displayNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String model() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer modelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String manufacturer() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer manufacturerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String firmwareVersion() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firmwareVersionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer firmwareVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public int mcuType() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public solarxr_protocol.device.pairing.DeviceFeatureInfo features() { return features(new solarxr_protocol.device.pairing.DeviceFeatureInfo()); }
  public solarxr_protocol.device.pairing.DeviceFeatureInfo features(solarxr_protocol.device.pairing.DeviceFeatureInfo obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public solarxr_protocol.device.pairing.DeviceSensorInfo sensors(int j) { return sensors(new solarxr_protocol.device.pairing.DeviceSensorInfo(), j); }
  public solarxr_protocol.device.pairing.DeviceSensorInfo sensors(solarxr_protocol.device.pairing.DeviceSensorInfo obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int sensorsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.device.pairing.DeviceSensorInfo.Vector sensorsVector() { return sensorsVector(new solarxr_protocol.device.pairing.DeviceSensorInfo.Vector()); }
  public solarxr_protocol.device.pairing.DeviceSensorInfo.Vector sensorsVector(solarxr_protocol.device.pairing.DeviceSensorInfo.Vector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPairingInfo(FlatBufferBuilder builder,
      long pairedTo,
      int displayNameOffset,
      int modelOffset,
      int manufacturerOffset,
      int firmwareVersionOffset,
      int mcuType,
      int featuresOffset,
      int sensorsOffset) {
    builder.startTable(8);
    PairingInfo.addSensors(builder, sensorsOffset);
    PairingInfo.addFeatures(builder, featuresOffset);
    PairingInfo.addFirmwareVersion(builder, firmwareVersionOffset);
    PairingInfo.addManufacturer(builder, manufacturerOffset);
    PairingInfo.addModel(builder, modelOffset);
    PairingInfo.addDisplayName(builder, displayNameOffset);
    PairingInfo.addPairedTo(builder, pairedTo);
    PairingInfo.addMcuType(builder, mcuType);
    return PairingInfo.endPairingInfo(builder);
  }

  public static void startPairingInfo(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addPairedTo(FlatBufferBuilder builder, long pairedTo) { builder.addInt(0, (int) pairedTo, (int) 0L); }
  public static void addDisplayName(FlatBufferBuilder builder, int displayNameOffset) { builder.addOffset(1, displayNameOffset, 0); }
  public static void addModel(FlatBufferBuilder builder, int modelOffset) { builder.addOffset(2, modelOffset, 0); }
  public static void addManufacturer(FlatBufferBuilder builder, int manufacturerOffset) { builder.addOffset(3, manufacturerOffset, 0); }
  public static void addFirmwareVersion(FlatBufferBuilder builder, int firmwareVersionOffset) { builder.addOffset(4, firmwareVersionOffset, 0); }
  public static void addMcuType(FlatBufferBuilder builder, int mcuType) { builder.addShort(5, (short) mcuType, (short) 0); }
  public static void addFeatures(FlatBufferBuilder builder, int featuresOffset) { builder.addOffset(6, featuresOffset, 0); }
  public static void addSensors(FlatBufferBuilder builder, int sensorsOffset) { builder.addOffset(7, sensorsOffset, 0); }
  public static int createSensorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSensorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPairingInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // display_name
    builder.required(o, 8);  // model
    builder.required(o, 10);  // manufacturer
    builder.required(o, 12);  // firmware_version
    builder.required(o, 16);  // features
    builder.required(o, 18);  // sensors
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PairingInfo get(int j) { return get(new PairingInfo(), j); }
    public PairingInfo get(PairingInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PairingInfoT unpack() {
    PairingInfoT _o = new PairingInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PairingInfoT _o) {
    long _oPairedTo = pairedTo();
    _o.setPairedTo(_oPairedTo);
    String _oDisplayName = displayName();
    _o.setDisplayName(_oDisplayName);
    String _oModel = model();
    _o.setModel(_oModel);
    String _oManufacturer = manufacturer();
    _o.setManufacturer(_oManufacturer);
    String _oFirmwareVersion = firmwareVersion();
    _o.setFirmwareVersion(_oFirmwareVersion);
    int _oMcuType = mcuType();
    _o.setMcuType(_oMcuType);
    if (features() != null) _o.setFeatures(features().unpack());
    else _o.setFeatures(null);
    solarxr_protocol.device.pairing.DeviceSensorInfoT[] _oSensors = new solarxr_protocol.device.pairing.DeviceSensorInfoT[sensorsLength()];
    for (int _j = 0; _j < sensorsLength(); ++_j) {_oSensors[_j] = (sensors(_j) != null ? sensors(_j).unpack() : null);}
    _o.setSensors(_oSensors);
  }
  public static int pack(FlatBufferBuilder builder, PairingInfoT _o) {
    if (_o == null) return 0;
    int _displayName = _o.getDisplayName() == null ? 0 : builder.createString(_o.getDisplayName());
    int _model = _o.getModel() == null ? 0 : builder.createString(_o.getModel());
    int _manufacturer = _o.getManufacturer() == null ? 0 : builder.createString(_o.getManufacturer());
    int _firmwareVersion = _o.getFirmwareVersion() == null ? 0 : builder.createString(_o.getFirmwareVersion());
    int _features = _o.getFeatures() == null ? 0 : solarxr_protocol.device.pairing.DeviceFeatureInfo.pack(builder, _o.getFeatures());
    int _sensors = 0;
    if (_o.getSensors() != null) {
      int[] __sensors = new int[_o.getSensors().length];
      int _j = 0;
      for (solarxr_protocol.device.pairing.DeviceSensorInfoT _e : _o.getSensors()) { __sensors[_j] = solarxr_protocol.device.pairing.DeviceSensorInfo.pack(builder, _e); _j++;}
      _sensors = createSensorsVector(builder, __sensors);
    }
    return createPairingInfo(
      builder,
      _o.getPairedTo(),
      _displayName,
      _model,
      _manufacturer,
      _firmwareVersion,
      _o.getMcuType(),
      _features,
      _sensors);
  }
}

