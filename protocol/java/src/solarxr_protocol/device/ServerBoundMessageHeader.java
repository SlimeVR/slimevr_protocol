// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.device;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ServerBoundMessageHeader extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ServerBoundMessageHeader getRootAsServerBoundMessageHeader(ByteBuffer _bb) { return getRootAsServerBoundMessageHeader(_bb, new ServerBoundMessageHeader()); }
  public static ServerBoundMessageHeader getRootAsServerBoundMessageHeader(ByteBuffer _bb, ServerBoundMessageHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ServerBoundMessageHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.hardware_info.HardwareAddress macAddress() { return macAddress(new solarxr_protocol.datatypes.hardware_info.HardwareAddress()); }
  public solarxr_protocol.datatypes.hardware_info.HardwareAddress macAddress(solarxr_protocol.datatypes.hardware_info.HardwareAddress obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public byte reqRepType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table reqRep(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static void startServerBoundMessageHeader(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addMacAddress(FlatBufferBuilder builder, int macAddressOffset) { builder.addStruct(0, macAddressOffset, 0); }
  public static void addReqRepType(FlatBufferBuilder builder, byte reqRepType) { builder.addByte(1, reqRepType, 0); }
  public static void addReqRep(FlatBufferBuilder builder, int reqRepOffset) { builder.addOffset(2, reqRepOffset, 0); }
  public static int endServerBoundMessageHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // mac_address
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ServerBoundMessageHeader get(int j) { return get(new ServerBoundMessageHeader(), j); }
    public ServerBoundMessageHeader get(ServerBoundMessageHeader obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ServerBoundMessageHeaderT unpack() {
    ServerBoundMessageHeaderT _o = new ServerBoundMessageHeaderT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ServerBoundMessageHeaderT _o) {
    if (macAddress() != null) macAddress().unpackTo(_o.getMacAddress());
    else _o.setMacAddress(null);
    solarxr_protocol.device.ServerBoundMessageUnion _oReqRep = new solarxr_protocol.device.ServerBoundMessageUnion();
    byte _oReqRepType = reqRepType();
    _oReqRep.setType(_oReqRepType);
    Table _oReqRepValue;
    switch (_oReqRepType) {
      case solarxr_protocol.device.ServerBoundMessage.solarxr_protocol_device_pairing_PairingInfo:
        _oReqRepValue = reqRep(new solarxr_protocol.device.pairing.PairingInfo());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.pairing.PairingInfo) _oReqRepValue).unpack() : null);
        break;
      case solarxr_protocol.device.ServerBoundMessage.solarxr_protocol_device_pairing_PairingResponse:
        _oReqRepValue = reqRep(new solarxr_protocol.device.pairing.PairingResponse());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.pairing.PairingResponse) _oReqRepValue).unpack() : null);
        break;
      case solarxr_protocol.device.ServerBoundMessage.PingResponse:
        _oReqRepValue = reqRep(new solarxr_protocol.device.PingResponse());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.PingResponse) _oReqRepValue).unpack() : null);
        break;
      case solarxr_protocol.device.ServerBoundMessage.solarxr_protocol_device_packets_DeviceStatus:
        _oReqRepValue = reqRep(new solarxr_protocol.device.packets.DeviceStatus());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.packets.DeviceStatus) _oReqRepValue).unpack() : null);
        break;
      case solarxr_protocol.device.ServerBoundMessage.solarxr_protocol_device_packets_ImuStatus:
        _oReqRepValue = reqRep(new solarxr_protocol.device.packets.ImuStatus());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.packets.ImuStatus) _oReqRepValue).unpack() : null);
        break;
      case solarxr_protocol.device.ServerBoundMessage.solarxr_protocol_device_packets_ImuMovement:
        _oReqRepValue = reqRep(new solarxr_protocol.device.packets.ImuMovement());
        _oReqRep.setValue(_oReqRepValue != null ? ((solarxr_protocol.device.packets.ImuMovement) _oReqRepValue).unpack() : null);
        break;
      default: break;
    }
    _o.setReqRep(_oReqRep);
  }
  public static int pack(FlatBufferBuilder builder, ServerBoundMessageHeaderT _o) {
    if (_o == null) return 0;
    byte _reqRepType = _o.getReqRep() == null ? solarxr_protocol.device.ServerBoundMessage.NONE : _o.getReqRep().getType();
    int _reqRep = _o.getReqRep() == null ? 0 : solarxr_protocol.device.ServerBoundMessageUnion.pack(builder, _o.getReqRep());
    startServerBoundMessageHeader(builder);
    addMacAddress(builder, solarxr_protocol.datatypes.hardware_info.HardwareAddress.pack(builder, _o.getMacAddress()));
    addReqRepType(builder, _reqRepType);
    addReqRep(builder, _reqRep);
    return endServerBoundMessageHeader(builder);
  }
}

