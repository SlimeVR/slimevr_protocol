// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HardwareAddress, HardwareAddressT } from '../../../solarxr-protocol/datatypes/hardware-info/hardware-address';


export class PairDeviceRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PairDeviceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPairDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:PairDeviceRequest):PairDeviceRequest {
  return (obj || new PairDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPairDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:PairDeviceRequest):PairDeviceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PairDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pair():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

macAddress(obj?:HardwareAddress):HardwareAddress|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new HardwareAddress()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startPairDeviceRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPair(builder:flatbuffers.Builder, pair:boolean) {
  builder.addFieldInt8(0, +pair, +false);
}

static addMacAddress(builder:flatbuffers.Builder, macAddressOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, macAddressOffset, 0);
}

static endPairDeviceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PairDeviceRequestT {
  return new PairDeviceRequestT(
    this.pair(),
    (this.macAddress() !== null ? this.macAddress()!.unpack() : null)
  );
}


unpackTo(_o: PairDeviceRequestT): void {
  _o.pair = this.pair();
  _o.macAddress = (this.macAddress() !== null ? this.macAddress()!.unpack() : null);
}
}

export class PairDeviceRequestT {
constructor(
  public pair: boolean = false,
  public macAddress: HardwareAddressT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  PairDeviceRequest.startPairDeviceRequest(builder);
  PairDeviceRequest.addPair(builder, this.pair);
  PairDeviceRequest.addMacAddress(builder, (this.macAddress !== null ? this.macAddress!.pack(builder) : 0));

  return PairDeviceRequest.endPairDeviceRequest(builder);
}
}
