// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * The `PingRequest` gets sent from the server to the device
 * which then will respond to that ping with the `PingResponse` packet.
 *
 * Can be used to measure RTT between the server and device.
 */
export class PingRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PingRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPingRequest(bb:flatbuffers.ByteBuffer, obj?:PingRequest):PingRequest {
  return (obj || new PingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPingRequest(bb:flatbuffers.ByteBuffer, obj?:PingRequest):PingRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startPingRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endPingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  PingRequest.startPingRequest(builder);
  return PingRequest.endPingRequest(builder);
}

unpack(): PingRequestT {
  return new PingRequestT();
}


unpackTo(_o: PingRequestT): void {}
}

export class PingRequestT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PingRequest.createPingRequest(builder);
}
}
