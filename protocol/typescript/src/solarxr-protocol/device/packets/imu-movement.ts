// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Quat, QuatT } from '../../../solarxr-protocol/datatypes/math/quat';
import { Vec3f, Vec3fT } from '../../../solarxr-protocol/datatypes/math/vec3f';


export class ImuMovement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ImuMovement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImuMovement(bb:flatbuffers.ByteBuffer, obj?:ImuMovement):ImuMovement {
  return (obj || new ImuMovement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImuMovement(bb:flatbuffers.ByteBuffer, obj?:ImuMovement):ImuMovement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ImuMovement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

rotation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

acceleration(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startImuMovement(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(0, id, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, rotationOffset, 0);
}

static addAcceleration(builder:flatbuffers.Builder, accelerationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, accelerationOffset, 0);
}

static endImuMovement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ImuMovementT {
  return new ImuMovementT(
    this.id(),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    (this.acceleration() !== null ? this.acceleration()!.unpack() : null)
  );
}


unpackTo(_o: ImuMovementT): void {
  _o.id = this.id();
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.acceleration = (this.acceleration() !== null ? this.acceleration()!.unpack() : null);
}
}

export class ImuMovementT {
constructor(
  public id: number = 0,
  public rotation: QuatT|null = null,
  public acceleration: Vec3fT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  ImuMovement.startImuMovement(builder);
  ImuMovement.addId(builder, this.id);
  ImuMovement.addRotation(builder, (this.rotation !== null ? this.rotation!.pack(builder) : 0));
  ImuMovement.addAcceleration(builder, (this.acceleration !== null ? this.acceleration!.pack(builder) : 0));

  return ImuMovement.endImuMovement(builder);
}
}
