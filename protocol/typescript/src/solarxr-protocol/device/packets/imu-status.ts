// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HzF32, HzF32T } from '../../../solarxr-protocol/datatypes/hz-f32';
import { ImuErrorCode } from '../../../solarxr-protocol/datatypes/imu-error-code';
import { Temperature, TemperatureT } from '../../../solarxr-protocol/datatypes/temperature';
import { ImuType } from '../../../solarxr-protocol/datatypes/hardware-info/imu-type';


export class ImuStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ImuStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImuStatus(bb:flatbuffers.ByteBuffer, obj?:ImuStatus):ImuStatus {
  return (obj || new ImuStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImuStatus(bb:flatbuffers.ByteBuffer, obj?:ImuStatus):ImuStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ImuStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

imuType():ImuType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ImuType.Other;
}

pollRate(obj?:HzF32):HzF32|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new HzF32()).__init(this.bb_pos + offset, this.bb!) : null;
}

temperature(obj?:Temperature):Temperature|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Temperature()).__init(this.bb_pos + offset, this.bb!) : null;
}

errorStatus():ImuErrorCode|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

magnetometerAccuracy():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startImuStatus(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(0, id, 0);
}

static addImuType(builder:flatbuffers.Builder, imuType:ImuType) {
  builder.addFieldInt16(1, imuType, ImuType.Other);
}

static addPollRate(builder:flatbuffers.Builder, pollRateOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, pollRateOffset, 0);
}

static addTemperature(builder:flatbuffers.Builder, temperatureOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, temperatureOffset, 0);
}

static addErrorStatus(builder:flatbuffers.Builder, errorStatus:ImuErrorCode) {
  builder.addFieldInt8(4, errorStatus, 0);
}

static addMagnetometerAccuracy(builder:flatbuffers.Builder, magnetometerAccuracy:number) {
  builder.addFieldFloat32(5, magnetometerAccuracy, 0.0);
}

static endImuStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ImuStatusT {
  return new ImuStatusT(
    this.id(),
    this.imuType(),
    (this.pollRate() !== null ? this.pollRate()!.unpack() : null),
    (this.temperature() !== null ? this.temperature()!.unpack() : null),
    this.errorStatus(),
    this.magnetometerAccuracy()
  );
}


unpackTo(_o: ImuStatusT): void {
  _o.id = this.id();
  _o.imuType = this.imuType();
  _o.pollRate = (this.pollRate() !== null ? this.pollRate()!.unpack() : null);
  _o.temperature = (this.temperature() !== null ? this.temperature()!.unpack() : null);
  _o.errorStatus = this.errorStatus();
  _o.magnetometerAccuracy = this.magnetometerAccuracy();
}
}

export class ImuStatusT {
constructor(
  public id: number = 0,
  public imuType: ImuType = ImuType.Other,
  public pollRate: HzF32T|null = null,
  public temperature: TemperatureT|null = null,
  public errorStatus: ImuErrorCode|null = null,
  public magnetometerAccuracy: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  ImuStatus.startImuStatus(builder);
  ImuStatus.addId(builder, this.id);
  ImuStatus.addImuType(builder, this.imuType);
  ImuStatus.addPollRate(builder, (this.pollRate !== null ? this.pollRate!.pack(builder) : 0));
  ImuStatus.addTemperature(builder, (this.temperature !== null ? this.temperature!.pack(builder) : 0));
  if (this.errorStatus !== null)
    ImuStatus.addErrorStatus(builder, this.errorStatus);
  ImuStatus.addMagnetometerAccuracy(builder, this.magnetometerAccuracy);

  return ImuStatus.endImuStatus(builder);
}
}
