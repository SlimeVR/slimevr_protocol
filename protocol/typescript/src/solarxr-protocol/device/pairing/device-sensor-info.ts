// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ImuType } from '../../../solarxr-protocol/datatypes/hardware-info/imu-type';
import { ImuFeatureInfo, ImuFeatureInfoT } from '../../../solarxr-protocol/device/pairing/imu-feature-info';


export class DeviceSensorInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DeviceSensorInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceSensorInfo(bb:flatbuffers.ByteBuffer, obj?:DeviceSensorInfo):DeviceSensorInfo {
  return (obj || new DeviceSensorInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceSensorInfo(bb:flatbuffers.ByteBuffer, obj?:DeviceSensorInfo):DeviceSensorInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceSensorInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * If the ID is contained twice in the array,
 * only the first one will be used and the others will be ign√∂red.
 */
id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

type():ImuType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ImuType.Other;
}

features(obj?:ImuFeatureInfo):ImuFeatureInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ImuFeatureInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDeviceSensorInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(0, id, 0);
}

static addType(builder:flatbuffers.Builder, type:ImuType) {
  builder.addFieldInt16(1, type, ImuType.Other);
}

static addFeatures(builder:flatbuffers.Builder, featuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, featuresOffset, 0);
}

static endDeviceSensorInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // features
  return offset;
}


unpack(): DeviceSensorInfoT {
  return new DeviceSensorInfoT(
    this.id(),
    this.type(),
    (this.features() !== null ? this.features()!.unpack() : null)
  );
}


unpackTo(_o: DeviceSensorInfoT): void {
  _o.id = this.id();
  _o.type = this.type();
  _o.features = (this.features() !== null ? this.features()!.unpack() : null);
}
}

export class DeviceSensorInfoT {
constructor(
  public id: number = 0,
  public type: ImuType = ImuType.Other,
  public features: ImuFeatureInfoT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const features = (this.features !== null ? this.features!.pack(builder) : 0);

  DeviceSensorInfo.startDeviceSensorInfo(builder);
  DeviceSensorInfo.addId(builder, this.id);
  DeviceSensorInfo.addType(builder, this.type);
  DeviceSensorInfo.addFeatures(builder, features);

  return DeviceSensorInfo.endDeviceSensorInfo(builder);
}
}
