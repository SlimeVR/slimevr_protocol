// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Sent by a server, trying to connect to a device
 * which then the device will respond to with the `PairingResponse` packet.
 */
export class PairingRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PairingRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPairingRequest(bb:flatbuffers.ByteBuffer, obj?:PairingRequest):PairingRequest {
  return (obj || new PairingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPairingRequest(bb:flatbuffers.ByteBuffer, obj?:PairingRequest):PairingRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PairingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Should not be `0`, will get ignored by the tracker otherwise.
 */
serverId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startPairingRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addServerId(builder:flatbuffers.Builder, serverId:number) {
  builder.addFieldInt32(0, serverId, 0);
}

static endPairingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPairingRequest(builder:flatbuffers.Builder, serverId:number):flatbuffers.Offset {
  PairingRequest.startPairingRequest(builder);
  PairingRequest.addServerId(builder, serverId);
  return PairingRequest.endPairingRequest(builder);
}

unpack(): PairingRequestT {
  return new PairingRequestT(
    this.serverId()
  );
}


unpackTo(_o: PairingRequestT): void {
  _o.serverId = this.serverId();
}
}

export class PairingRequestT {
constructor(
  public serverId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PairingRequest.createPairingRequest(builder,
    this.serverId
  );
}
}
