// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Broadcast by the server to discover devices on startup.
 * The devices will respond with the `PairingInfo` packet.
 */
export class DiscoverRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DiscoverRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDiscoverRequest(bb:flatbuffers.ByteBuffer, obj?:DiscoverRequest):DiscoverRequest {
  return (obj || new DiscoverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDiscoverRequest(bb:flatbuffers.ByteBuffer, obj?:DiscoverRequest):DiscoverRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DiscoverRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startDiscoverRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endDiscoverRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDiscoverRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  DiscoverRequest.startDiscoverRequest(builder);
  return DiscoverRequest.endDiscoverRequest(builder);
}

unpack(): DiscoverRequestT {
  return new DiscoverRequestT();
}


unpackTo(_o: DiscoverRequestT): void {}
}

export class DiscoverRequestT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return DiscoverRequest.createDiscoverRequest(builder);
}
}
