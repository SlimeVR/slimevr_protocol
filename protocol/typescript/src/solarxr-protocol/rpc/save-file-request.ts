// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Response of the SaveFileNotification after the user interacts with the file save request
 */
export class SaveFileRequest implements flatbuffers.IUnpackableObject<SaveFileRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SaveFileRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSaveFileRequest(bb:flatbuffers.ByteBuffer, obj?:SaveFileRequest):SaveFileRequest {
  return (obj || new SaveFileRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSaveFileRequest(bb:flatbuffers.ByteBuffer, obj?:SaveFileRequest):SaveFileRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SaveFileRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * ID of the SaveFile, given by SaveFileNotification
 */
id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Where to save the file, if null, server will choose where to save it
 */
path():string|null
path(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
path(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Iff false, the file save will be canceled
 */
canceled():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

static startSaveFileRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addPath(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pathOffset, 0);
}

static addCanceled(builder:flatbuffers.Builder, canceled:boolean) {
  builder.addFieldInt8(2, +canceled, 0);
}

static endSaveFileRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSaveFileRequest(builder:flatbuffers.Builder, id:number, pathOffset:flatbuffers.Offset, canceled:boolean|null):flatbuffers.Offset {
  SaveFileRequest.startSaveFileRequest(builder);
  SaveFileRequest.addId(builder, id);
  SaveFileRequest.addPath(builder, pathOffset);
  if (canceled !== null)
    SaveFileRequest.addCanceled(builder, canceled);
  return SaveFileRequest.endSaveFileRequest(builder);
}

unpack(): SaveFileRequestT {
  return new SaveFileRequestT(
    this.id(),
    this.path(),
    this.canceled()
  );
}


unpackTo(_o: SaveFileRequestT): void {
  _o.id = this.id();
  _o.path = this.path();
  _o.canceled = this.canceled();
}
}

export class SaveFileRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public id: number = 0,
  public path: string|Uint8Array|null = null,
  public canceled: boolean|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const path = (this.path !== null ? builder.createString(this.path!) : 0);

  return SaveFileRequest.createSaveFileRequest(builder,
    this.id,
    path,
    this.canceled
  );
}
}
