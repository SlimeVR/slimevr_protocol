// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerBoundMessageHeaderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerBoundMessageHeader<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerBoundMessageHeader<'a> {
  type Inner = ServerBoundMessageHeader<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ServerBoundMessageHeader<'a> {
  pub const VT_MAC_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_REQ_REP_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_REQ_REP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerBoundMessageHeader { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ServerBoundMessageHeaderArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerBoundMessageHeader<'bldr>> {
    let mut builder = ServerBoundMessageHeaderBuilder::new(_fbb);
    if let Some(x) = args.req_rep { builder.add_req_rep(x); }
    if let Some(x) = args.mac_address { builder.add_mac_address(x); }
    builder.add_req_rep_type(args.req_rep_type);
    builder.finish()
  }


  #[inline]
  pub fn mac_address(&self) -> &'a super::datatypes::hardware_info::HardwareAddress {
    self._tab.get::<super::datatypes::hardware_info::HardwareAddress>(ServerBoundMessageHeader::VT_MAC_ADDRESS, None).unwrap()
  }
  #[inline]
  pub fn req_rep_type(&self) -> ServerBoundMessage {
    self._tab.get::<ServerBoundMessage>(ServerBoundMessageHeader::VT_REQ_REP_TYPE, Some(ServerBoundMessage::NONE)).unwrap()
  }
  #[inline]
  pub fn req_rep(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(ServerBoundMessageHeader::VT_REQ_REP, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_solarxr_protocol_device_pairing_pairing_info(&self) -> Option<pairing::PairingInfo<'a>> {
    if self.req_rep_type() == ServerBoundMessage::solarxr_protocol_device_pairing_PairingInfo {
      self.req_rep().map(pairing::PairingInfo::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_solarxr_protocol_device_pairing_pairing_response(&self) -> Option<pairing::PairingResponse<'a>> {
    if self.req_rep_type() == ServerBoundMessage::solarxr_protocol_device_pairing_PairingResponse {
      self.req_rep().map(pairing::PairingResponse::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_ping_response(&self) -> Option<PingResponse<'a>> {
    if self.req_rep_type() == ServerBoundMessage::PingResponse {
      self.req_rep().map(PingResponse::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_solarxr_protocol_device_packets_device_status(&self) -> Option<packets::DeviceStatus<'a>> {
    if self.req_rep_type() == ServerBoundMessage::solarxr_protocol_device_packets_DeviceStatus {
      self.req_rep().map(packets::DeviceStatus::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_solarxr_protocol_device_packets_imu_status(&self) -> Option<packets::ImuStatus<'a>> {
    if self.req_rep_type() == ServerBoundMessage::solarxr_protocol_device_packets_ImuStatus {
      self.req_rep().map(packets::ImuStatus::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn req_rep_as_solarxr_protocol_device_packets_imu_movement(&self) -> Option<packets::ImuMovement<'a>> {
    if self.req_rep_type() == ServerBoundMessage::solarxr_protocol_device_packets_ImuMovement {
      self.req_rep().map(packets::ImuMovement::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for ServerBoundMessageHeader<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::datatypes::hardware_info::HardwareAddress>("mac_address", Self::VT_MAC_ADDRESS, true)?
     .visit_union::<ServerBoundMessage, _>("req_rep_type", Self::VT_REQ_REP_TYPE, "req_rep", Self::VT_REQ_REP, false, |key, v, pos| {
        match key {
          ServerBoundMessage::solarxr_protocol_device_pairing_PairingInfo => v.verify_union_variant::<flatbuffers::ForwardsUOffset<pairing::PairingInfo>>("ServerBoundMessage::solarxr_protocol_device_pairing_PairingInfo", pos),
          ServerBoundMessage::solarxr_protocol_device_pairing_PairingResponse => v.verify_union_variant::<flatbuffers::ForwardsUOffset<pairing::PairingResponse>>("ServerBoundMessage::solarxr_protocol_device_pairing_PairingResponse", pos),
          ServerBoundMessage::PingResponse => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PingResponse>>("ServerBoundMessage::PingResponse", pos),
          ServerBoundMessage::solarxr_protocol_device_packets_DeviceStatus => v.verify_union_variant::<flatbuffers::ForwardsUOffset<packets::DeviceStatus>>("ServerBoundMessage::solarxr_protocol_device_packets_DeviceStatus", pos),
          ServerBoundMessage::solarxr_protocol_device_packets_ImuStatus => v.verify_union_variant::<flatbuffers::ForwardsUOffset<packets::ImuStatus>>("ServerBoundMessage::solarxr_protocol_device_packets_ImuStatus", pos),
          ServerBoundMessage::solarxr_protocol_device_packets_ImuMovement => v.verify_union_variant::<flatbuffers::ForwardsUOffset<packets::ImuMovement>>("ServerBoundMessage::solarxr_protocol_device_packets_ImuMovement", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ServerBoundMessageHeaderArgs<'a> {
    pub mac_address: Option<&'a super::datatypes::hardware_info::HardwareAddress>,
    pub req_rep_type: ServerBoundMessage,
    pub req_rep: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ServerBoundMessageHeaderArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerBoundMessageHeaderArgs {
      mac_address: None, // required field
      req_rep_type: ServerBoundMessage::NONE,
      req_rep: None,
    }
  }
}

pub struct ServerBoundMessageHeaderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerBoundMessageHeaderBuilder<'a, 'b> {
  #[inline]
  pub fn add_mac_address(&mut self, mac_address: &super::datatypes::hardware_info::HardwareAddress) {
    self.fbb_.push_slot_always::<&super::datatypes::hardware_info::HardwareAddress>(ServerBoundMessageHeader::VT_MAC_ADDRESS, mac_address);
  }
  #[inline]
  pub fn add_req_rep_type(&mut self, req_rep_type: ServerBoundMessage) {
    self.fbb_.push_slot::<ServerBoundMessage>(ServerBoundMessageHeader::VT_REQ_REP_TYPE, req_rep_type, ServerBoundMessage::NONE);
  }
  #[inline]
  pub fn add_req_rep(&mut self, req_rep: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerBoundMessageHeader::VT_REQ_REP, req_rep);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerBoundMessageHeaderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerBoundMessageHeaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerBoundMessageHeader<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ServerBoundMessageHeader::VT_MAC_ADDRESS,"mac_address");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerBoundMessageHeader<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerBoundMessageHeader");
      ds.field("mac_address", &self.mac_address());
      ds.field("req_rep_type", &self.req_rep_type());
      match self.req_rep_type() {
        ServerBoundMessage::solarxr_protocol_device_pairing_PairingInfo => {
          if let Some(x) = self.req_rep_as_solarxr_protocol_device_pairing_pairing_info() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerBoundMessage::solarxr_protocol_device_pairing_PairingResponse => {
          if let Some(x) = self.req_rep_as_solarxr_protocol_device_pairing_pairing_response() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerBoundMessage::PingResponse => {
          if let Some(x) = self.req_rep_as_ping_response() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerBoundMessage::solarxr_protocol_device_packets_DeviceStatus => {
          if let Some(x) = self.req_rep_as_solarxr_protocol_device_packets_device_status() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerBoundMessage::solarxr_protocol_device_packets_ImuStatus => {
          if let Some(x) = self.req_rep_as_solarxr_protocol_device_packets_imu_status() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerBoundMessage::solarxr_protocol_device_packets_ImuMovement => {
          if let Some(x) = self.req_rep_as_solarxr_protocol_device_packets_imu_movement() {
            ds.field("req_rep", &x)
          } else {
            ds.field("req_rep", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("req_rep", &x)
        },
      };
      ds.finish()
  }
}
