// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceSensorInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeviceSensorInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceSensorInfo<'a> {
  type Inner = DeviceSensorInfo<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceSensorInfo<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_FEATURES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceSensorInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceSensorInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<DeviceSensorInfo<'bldr>> {
    let mut builder = DeviceSensorInfoBuilder::new(_fbb);
    if let Some(x) = args.features { builder.add_features(x); }
    builder.add_type_(args.type_);
    builder.add_id(args.id);
    builder.finish()
  }


  /// If the ID is contained twice in the array,
  /// only the first one will be used and the others will be ignÃ¶red.
  #[inline]
  pub fn id(&self) -> u8 {
    self._tab.get::<u8>(DeviceSensorInfo::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn type_(&self) -> super::super::datatypes::hardware_info::ImuType {
    self._tab.get::<super::super::datatypes::hardware_info::ImuType>(DeviceSensorInfo::VT_TYPE_, Some(super::super::datatypes::hardware_info::ImuType::Other)).unwrap()
  }
  #[inline]
  pub fn features(&self) -> ImuFeatureInfo<'a> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ImuFeatureInfo>>(DeviceSensorInfo::VT_FEATURES, None).unwrap()
  }
}

impl flatbuffers::Verifiable for DeviceSensorInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("id", Self::VT_ID, false)?
     .visit_field::<super::super::datatypes::hardware_info::ImuType>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ImuFeatureInfo>>("features", Self::VT_FEATURES, true)?
     .finish();
    Ok(())
  }
}
pub struct DeviceSensorInfoArgs<'a> {
    pub id: u8,
    pub type_: super::super::datatypes::hardware_info::ImuType,
    pub features: Option<flatbuffers::WIPOffset<ImuFeatureInfo<'a>>>,
}
impl<'a> Default for DeviceSensorInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeviceSensorInfoArgs {
      id: 0,
      type_: super::super::datatypes::hardware_info::ImuType::Other,
      features: None, // required field
    }
  }
}

pub struct DeviceSensorInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceSensorInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u8) {
    self.fbb_.push_slot::<u8>(DeviceSensorInfo::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: super::super::datatypes::hardware_info::ImuType) {
    self.fbb_.push_slot::<super::super::datatypes::hardware_info::ImuType>(DeviceSensorInfo::VT_TYPE_, type_, super::super::datatypes::hardware_info::ImuType::Other);
  }
  #[inline]
  pub fn add_features(&mut self, features: flatbuffers::WIPOffset<ImuFeatureInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ImuFeatureInfo>>(DeviceSensorInfo::VT_FEATURES, features);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceSensorInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceSensorInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceSensorInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, DeviceSensorInfo::VT_FEATURES,"features");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeviceSensorInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeviceSensorInfo");
      ds.field("id", &self.id());
      ds.field("type_", &self.type_());
      ds.field("features", &self.features());
      ds.finish()
  }
}
