// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ImuFeatureInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ImuFeatureInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ImuFeatureInfo<'a> {
  type Inner = ImuFeatureInfo<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ImuFeatureInfo<'a> {
  pub const VT_GYROSCOPE_CALIBRATION: flatbuffers::VOffsetT = 4;
  pub const VT_ACCELEROMETER_CALIBRATION: flatbuffers::VOffsetT = 6;
  pub const VT_MAGNETOMETER_CALIBRATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ImuFeatureInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ImuFeatureInfoArgs
  ) -> flatbuffers::WIPOffset<ImuFeatureInfo<'bldr>> {
    let mut builder = ImuFeatureInfoBuilder::new(_fbb);
    builder.add_magnetometer_calibration(args.magnetometer_calibration);
    builder.add_accelerometer_calibration(args.accelerometer_calibration);
    builder.add_gyroscope_calibration(args.gyroscope_calibration);
    builder.finish()
  }


  #[inline]
  pub fn gyroscope_calibration(&self) -> bool {
    self._tab.get::<bool>(ImuFeatureInfo::VT_GYROSCOPE_CALIBRATION, Some(false)).unwrap()
  }
  #[inline]
  pub fn accelerometer_calibration(&self) -> bool {
    self._tab.get::<bool>(ImuFeatureInfo::VT_ACCELEROMETER_CALIBRATION, Some(false)).unwrap()
  }
  #[inline]
  pub fn magnetometer_calibration(&self) -> bool {
    self._tab.get::<bool>(ImuFeatureInfo::VT_MAGNETOMETER_CALIBRATION, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for ImuFeatureInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("gyroscope_calibration", Self::VT_GYROSCOPE_CALIBRATION, false)?
     .visit_field::<bool>("accelerometer_calibration", Self::VT_ACCELEROMETER_CALIBRATION, false)?
     .visit_field::<bool>("magnetometer_calibration", Self::VT_MAGNETOMETER_CALIBRATION, false)?
     .finish();
    Ok(())
  }
}
pub struct ImuFeatureInfoArgs {
    pub gyroscope_calibration: bool,
    pub accelerometer_calibration: bool,
    pub magnetometer_calibration: bool,
}
impl<'a> Default for ImuFeatureInfoArgs {
  #[inline]
  fn default() -> Self {
    ImuFeatureInfoArgs {
      gyroscope_calibration: false,
      accelerometer_calibration: false,
      magnetometer_calibration: false,
    }
  }
}

pub struct ImuFeatureInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ImuFeatureInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_gyroscope_calibration(&mut self, gyroscope_calibration: bool) {
    self.fbb_.push_slot::<bool>(ImuFeatureInfo::VT_GYROSCOPE_CALIBRATION, gyroscope_calibration, false);
  }
  #[inline]
  pub fn add_accelerometer_calibration(&mut self, accelerometer_calibration: bool) {
    self.fbb_.push_slot::<bool>(ImuFeatureInfo::VT_ACCELEROMETER_CALIBRATION, accelerometer_calibration, false);
  }
  #[inline]
  pub fn add_magnetometer_calibration(&mut self, magnetometer_calibration: bool) {
    self.fbb_.push_slot::<bool>(ImuFeatureInfo::VT_MAGNETOMETER_CALIBRATION, magnetometer_calibration, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ImuFeatureInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ImuFeatureInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ImuFeatureInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ImuFeatureInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ImuFeatureInfo");
      ds.field("gyroscope_calibration", &self.gyroscope_calibration());
      ds.field("accelerometer_calibration", &self.accelerometer_calibration());
      ds.field("magnetometer_calibration", &self.magnetometer_calibration());
      ds.finish()
  }
}
