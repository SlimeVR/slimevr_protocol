// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PairingRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Sent by a server, trying to connect to a device
/// which then the device will respond to with the `PairingResponse` packet.
pub struct PairingRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PairingRequest<'a> {
  type Inner = PairingRequest<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> PairingRequest<'a> {
  pub const VT_SERVER_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PairingRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PairingRequestArgs
  ) -> flatbuffers::WIPOffset<PairingRequest<'bldr>> {
    let mut builder = PairingRequestBuilder::new(_fbb);
    builder.add_server_id(args.server_id);
    builder.finish()
  }


  /// Should not be `0`, will get ignored by the tracker otherwise.
  #[inline]
  pub fn server_id(&self) -> u32 {
    self._tab.get::<u32>(PairingRequest::VT_SERVER_ID, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for PairingRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("server_id", Self::VT_SERVER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct PairingRequestArgs {
    pub server_id: u32,
}
impl<'a> Default for PairingRequestArgs {
  #[inline]
  fn default() -> Self {
    PairingRequestArgs {
      server_id: 0,
    }
  }
}

pub struct PairingRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PairingRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_server_id(&mut self, server_id: u32) {
    self.fbb_.push_slot::<u32>(PairingRequest::VT_SERVER_ID, server_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PairingRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PairingRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PairingRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PairingRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PairingRequest");
      ds.field("server_id", &self.server_id());
      ds.finish()
  }
}
