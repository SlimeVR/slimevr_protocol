// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ImuMovementOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ImuMovement<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ImuMovement<'a> {
  type Inner = ImuMovement<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ImuMovement<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 6;
  pub const VT_ACCELERATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ImuMovement { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ImuMovementArgs<'args>
  ) -> flatbuffers::WIPOffset<ImuMovement<'bldr>> {
    let mut builder = ImuMovementBuilder::new(_fbb);
    if let Some(x) = args.acceleration { builder.add_acceleration(x); }
    if let Some(x) = args.rotation { builder.add_rotation(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u8 {
    self._tab.get::<u8>(ImuMovement::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn rotation(&self) -> Option<&'a super::super::datatypes::math::Quat> {
    self._tab.get::<super::super::datatypes::math::Quat>(ImuMovement::VT_ROTATION, None)
  }
  #[inline]
  pub fn acceleration(&self) -> Option<&'a super::super::datatypes::math::Vec3f> {
    self._tab.get::<super::super::datatypes::math::Vec3f>(ImuMovement::VT_ACCELERATION, None)
  }
}

impl flatbuffers::Verifiable for ImuMovement<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("id", Self::VT_ID, false)?
     .visit_field::<super::super::datatypes::math::Quat>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<super::super::datatypes::math::Vec3f>("acceleration", Self::VT_ACCELERATION, false)?
     .finish();
    Ok(())
  }
}
pub struct ImuMovementArgs<'a> {
    pub id: u8,
    pub rotation: Option<&'a super::super::datatypes::math::Quat>,
    pub acceleration: Option<&'a super::super::datatypes::math::Vec3f>,
}
impl<'a> Default for ImuMovementArgs<'a> {
  #[inline]
  fn default() -> Self {
    ImuMovementArgs {
      id: 0,
      rotation: None,
      acceleration: None,
    }
  }
}

pub struct ImuMovementBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ImuMovementBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u8) {
    self.fbb_.push_slot::<u8>(ImuMovement::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: &super::super::datatypes::math::Quat) {
    self.fbb_.push_slot_always::<&super::super::datatypes::math::Quat>(ImuMovement::VT_ROTATION, rotation);
  }
  #[inline]
  pub fn add_acceleration(&mut self, acceleration: &super::super::datatypes::math::Vec3f) {
    self.fbb_.push_slot_always::<&super::super::datatypes::math::Vec3f>(ImuMovement::VT_ACCELERATION, acceleration);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ImuMovementBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ImuMovementBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ImuMovement<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ImuMovement<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ImuMovement");
      ds.field("id", &self.id());
      ds.field("rotation", &self.rotation());
      ds.field("acceleration", &self.acceleration());
      ds.finish()
  }
}
