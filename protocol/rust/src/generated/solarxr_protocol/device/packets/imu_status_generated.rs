// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ImuStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ImuStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ImuStatus<'a> {
  type Inner = ImuStatus<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> ImuStatus<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IMU_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_POLL_RATE: flatbuffers::VOffsetT = 8;
  pub const VT_TEMPERATURE: flatbuffers::VOffsetT = 10;
  pub const VT_ERROR_STATUS: flatbuffers::VOffsetT = 12;
  pub const VT_MAGNETOMETER_ACCURACY: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ImuStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ImuStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<ImuStatus<'bldr>> {
    let mut builder = ImuStatusBuilder::new(_fbb);
    builder.add_magnetometer_accuracy(args.magnetometer_accuracy);
    if let Some(x) = args.temperature { builder.add_temperature(x); }
    if let Some(x) = args.poll_rate { builder.add_poll_rate(x); }
    builder.add_imu_type(args.imu_type);
    if let Some(x) = args.error_status { builder.add_error_status(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u8 {
    self._tab.get::<u8>(ImuStatus::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn imu_type(&self) -> super::super::datatypes::hardware_info::ImuType {
    self._tab.get::<super::super::datatypes::hardware_info::ImuType>(ImuStatus::VT_IMU_TYPE, Some(super::super::datatypes::hardware_info::ImuType::Other)).unwrap()
  }
  #[inline]
  pub fn poll_rate(&self) -> Option<&'a super::super::datatypes::HzF32> {
    self._tab.get::<super::super::datatypes::HzF32>(ImuStatus::VT_POLL_RATE, None)
  }
  #[inline]
  pub fn temperature(&self) -> Option<&'a super::super::datatypes::Temperature> {
    self._tab.get::<super::super::datatypes::Temperature>(ImuStatus::VT_TEMPERATURE, None)
  }
  #[inline]
  pub fn error_status(&self) -> Option<super::super::datatypes::ImuErrorCode> {
    self._tab.get::<super::super::datatypes::ImuErrorCode>(ImuStatus::VT_ERROR_STATUS, None)
  }
  #[inline]
  pub fn magnetometer_accuracy(&self) -> f32 {
    self._tab.get::<f32>(ImuStatus::VT_MAGNETOMETER_ACCURACY, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for ImuStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("id", Self::VT_ID, false)?
     .visit_field::<super::super::datatypes::hardware_info::ImuType>("imu_type", Self::VT_IMU_TYPE, false)?
     .visit_field::<super::super::datatypes::HzF32>("poll_rate", Self::VT_POLL_RATE, false)?
     .visit_field::<super::super::datatypes::Temperature>("temperature", Self::VT_TEMPERATURE, false)?
     .visit_field::<super::super::datatypes::ImuErrorCode>("error_status", Self::VT_ERROR_STATUS, false)?
     .visit_field::<f32>("magnetometer_accuracy", Self::VT_MAGNETOMETER_ACCURACY, false)?
     .finish();
    Ok(())
  }
}
pub struct ImuStatusArgs<'a> {
    pub id: u8,
    pub imu_type: super::super::datatypes::hardware_info::ImuType,
    pub poll_rate: Option<&'a super::super::datatypes::HzF32>,
    pub temperature: Option<&'a super::super::datatypes::Temperature>,
    pub error_status: Option<super::super::datatypes::ImuErrorCode>,
    pub magnetometer_accuracy: f32,
}
impl<'a> Default for ImuStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    ImuStatusArgs {
      id: 0,
      imu_type: super::super::datatypes::hardware_info::ImuType::Other,
      poll_rate: None,
      temperature: None,
      error_status: None,
      magnetometer_accuracy: 0.0,
    }
  }
}

pub struct ImuStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ImuStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u8) {
    self.fbb_.push_slot::<u8>(ImuStatus::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_imu_type(&mut self, imu_type: super::super::datatypes::hardware_info::ImuType) {
    self.fbb_.push_slot::<super::super::datatypes::hardware_info::ImuType>(ImuStatus::VT_IMU_TYPE, imu_type, super::super::datatypes::hardware_info::ImuType::Other);
  }
  #[inline]
  pub fn add_poll_rate(&mut self, poll_rate: &super::super::datatypes::HzF32) {
    self.fbb_.push_slot_always::<&super::super::datatypes::HzF32>(ImuStatus::VT_POLL_RATE, poll_rate);
  }
  #[inline]
  pub fn add_temperature(&mut self, temperature: &super::super::datatypes::Temperature) {
    self.fbb_.push_slot_always::<&super::super::datatypes::Temperature>(ImuStatus::VT_TEMPERATURE, temperature);
  }
  #[inline]
  pub fn add_error_status(&mut self, error_status: super::super::datatypes::ImuErrorCode) {
    self.fbb_.push_slot_always::<super::super::datatypes::ImuErrorCode>(ImuStatus::VT_ERROR_STATUS, error_status);
  }
  #[inline]
  pub fn add_magnetometer_accuracy(&mut self, magnetometer_accuracy: f32) {
    self.fbb_.push_slot::<f32>(ImuStatus::VT_MAGNETOMETER_ACCURACY, magnetometer_accuracy, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ImuStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ImuStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ImuStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ImuStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ImuStatus");
      ds.field("id", &self.id());
      ds.field("imu_type", &self.imu_type());
      ds.field("poll_rate", &self.poll_rate());
      ds.field("temperature", &self.temperature());
      ds.field("error_status", &self.error_status());
      ds.field("magnetometer_accuracy", &self.magnetometer_accuracy());
      ds.finish()
  }
}
