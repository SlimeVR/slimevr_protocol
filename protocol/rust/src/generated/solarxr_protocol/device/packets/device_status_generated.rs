// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeviceStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceStatus<'a> {
  type Inner = DeviceStatus<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceStatus<'a> {
  pub const VT_BATTERY_PERCENTAGE: flatbuffers::VOffsetT = 4;
  pub const VT_RSSI: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceStatusArgs
  ) -> flatbuffers::WIPOffset<DeviceStatus<'bldr>> {
    let mut builder = DeviceStatusBuilder::new(_fbb);
    builder.add_rssi(args.rssi);
    builder.add_battery_percentage(args.battery_percentage);
    builder.finish()
  }


  #[inline]
  pub fn battery_percentage(&self) -> u8 {
    self._tab.get::<u8>(DeviceStatus::VT_BATTERY_PERCENTAGE, Some(0)).unwrap()
  }
  #[inline]
  pub fn rssi(&self) -> i16 {
    self._tab.get::<i16>(DeviceStatus::VT_RSSI, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for DeviceStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("battery_percentage", Self::VT_BATTERY_PERCENTAGE, false)?
     .visit_field::<i16>("rssi", Self::VT_RSSI, false)?
     .finish();
    Ok(())
  }
}
pub struct DeviceStatusArgs {
    pub battery_percentage: u8,
    pub rssi: i16,
}
impl<'a> Default for DeviceStatusArgs {
  #[inline]
  fn default() -> Self {
    DeviceStatusArgs {
      battery_percentage: 0,
      rssi: 0,
    }
  }
}

pub struct DeviceStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_battery_percentage(&mut self, battery_percentage: u8) {
    self.fbb_.push_slot::<u8>(DeviceStatus::VT_BATTERY_PERCENTAGE, battery_percentage, 0);
  }
  #[inline]
  pub fn add_rssi(&mut self, rssi: i16) {
    self.fbb_.push_slot::<i16>(DeviceStatus::VT_RSSI, rssi, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeviceStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeviceStatus");
      ds.field("battery_percentage", &self.battery_percentage());
      ds.field("rssi", &self.rssi());
      ds.finish()
  }
}
